{"version":3,"sources":["components/header.module.css","components/selectMenu.module.css","store/store.js","components/Grid.js","components/ult.js","components/BFS.js","components/Header.js","components/App.js","serviceWorker.js","index.js","store/Grid.module.css"],"names":["module","exports","gird","Array","fill","i","length","state","color","girdStyle","red","initialState","grid","start","end","prevCellState","prevCellColor","colorize","row","column","type","paintPath","store","createStore","action","wallGrid","wall","newGrid","element","moveGrid","prevState","prevColor","pathGrid","applyMiddleware","loggerMiddleware","Grid","paint","moveStart","handleMousrover","bind","col","this","console","log","props","setStart","drawWall","id","onMouseDown","setState","onMouseUp","map","rowIndex","key","cellIndex","onMouseOver","onClick","className","Component","connect","dispatch","sleep","milliseconds","Promise","resolve","reject","setTimeout","bfs","startCoordinates","callback","a","distanceFromTop","distanceFromLeft","queue","path","status","visited","Set","currentLocation","shift","exploreInDirection","newLocationNorth","push","newLocationEast","newLocationSouth","newLocationWest","locationStatus","location","set","maxRowSize","maxColSize","dft","dfl","has","direction","newPath","slice","newLocation","add","Header","search","ans","North","South","West","East","startrow","startcol","dr","headerStyle","header","button","clear","href","React","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.320ca26f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__2eggW\",\"button\":\"header_button__aSONM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"selectMenu_menu__W-hHc\",\"sub-menu\":\"selectMenu_sub-menu__nrtPY\"};","import { createStore, applyMiddleware } from 'redux';\nimport loggerMiddleware from 'redux-logger';\nimport girdStyle from './Grid.module.css';\n\nlet gird = new Array(20).fill([]);\nfor (let i = 0; i < gird.length; ++i) {\n  gird[i] = new Array(40).fill({ state: 'Empty', color: '' });\n}\ngird[10][10] = { state: 'start', color: girdStyle.red };\ngird[10][39] = { state: 'Goal', color: girdStyle.red };\n// gird[10][10] = { state: 1, color: girdStyle.red };\nconst initialState = {\n  grid: gird,\n  start: [10, 10],\n  end: [gird.length - 1, gird[0].length - 1],\n  prevCellState: 'Empty',\n  prevCellColor: '',\n};\n// const initialState = { grid: Array(20).fill(Array(80).fill('')) };\n\n//action type\nconst COLORIZE = 'COLORIZE';\nconst CLEAR = 'CLEAR';\nconst SET_START = 'SET_START';\nconst PAINT_PATH = 'PAINT_PATH';\nconst DRAW_WALL = 'DRAW_WALL';\n\n//action creator\nexport const colorize = (row, column) => ({ type: COLORIZE, row, column });\nexport const drawWall = (row, column) => ({ type: DRAW_WALL, row, column });\nexport const clear = () => ({ type: CLEAR });\nexport const setStart = (row, column) => ({ type: SET_START, row, column });\nexport const paintPath = (row, column) => ({ type: PAINT_PATH, row, column });\n//reducer\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case DRAW_WALL:\n      const wallGrid = [...state.grid];\n      wallGrid[action.row] = [...wallGrid[action.row]];\n      wallGrid[action.row][action.column] = {\n        ...wallGrid[action.row][action.column],\n      };\n      if (wallGrid[action.row][action.column].color === '') {\n        wallGrid[action.row][action.column].state = 'Visited';\n        wallGrid[action.row][action.column].color = girdStyle.wall;\n      }\n      return { ...state, grid: wallGrid };\n    case COLORIZE:\n      const newGrid = [...state.grid];\n      newGrid[action.row] = [...newGrid[action.row]];\n      newGrid[action.row][action.column] = {\n        ...newGrid[action.row][action.column],\n      };\n      if (newGrid[action.row][action.column].color === '') {\n        newGrid[action.row][action.column].state = 'Blocked';\n        newGrid[action.row][action.column].color = girdStyle.element;\n      }\n      return { ...state, grid: newGrid };\n    case CLEAR:\n      return initialState;\n    case SET_START:\n      const moveGrid = [...state.grid];\n      moveGrid[action.row] = [...moveGrid[action.row]];\n      //change the prev cell state\n      moveGrid[state.start[0]][state.start[1]] = {\n        ...moveGrid[state.start[0]][state.start[1]],\n      };\n      moveGrid[state.start[0]][state.start[1]].state = state.prevCellState;\n      moveGrid[state.start[0]][state.start[1]].color = state.prevCellColor;\n      let prevState = moveGrid[action.row][action.column].state;\n      let prevColor = moveGrid[action.row][action.column].color;\n      //change the curr cell state\n      moveGrid[action.row][action.column] = {\n        ...moveGrid[action.row][action.column],\n      };\n      moveGrid[action.row][action.column].state = 'start';\n      moveGrid[action.row][action.column].color = girdStyle.red;\n\n      return {\n        ...state,\n        grid: moveGrid,\n        start: [action.row, action.column],\n        prevCellState: prevState,\n        prevCellColor: prevColor,\n      };\n    case PAINT_PATH:\n      //[east,north,south,west]\n      const pathGrid = [...state.grid];\n      pathGrid[action.row][action.column] = {\n        ...pathGrid[action.row][action.column],\n      };\n      pathGrid[action.row][action.column].color = girdStyle.red;\n      return { ...state, grid: pathGrid };\n    default:\n      return state;\n  }\n}\n\nconst store = createStore(reducer, applyMiddleware(loggerMiddleware));\n\nexport default store;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { colorize, paintPath, drawWall, setStart } from '../store/store';\n\nclass Grid extends Component {\n  constructor() {\n    super();\n    this.state = {\n      paint: false,\n      moveStart: false,\n    };\n\n    this.handleMousrover = this.handleMousrover.bind(this);\n  }\n\n  async handleMousrover(row, col) {\n    if (this.state.moveStart) {\n      console.log('hello');\n      await this.props.setStart(row, col);\n    } else if (this.state.paint) {\n      this.props.drawWall(row, col);\n    }\n  }\n\n  render() {\n    const { grid } = this.props;\n\n    return (\n      <div id='pixelate'>\n        {/* truncated for brevity... */}\n\n        <table\n          onMouseDown={() => this.setState({ paint: true })}\n          onMouseUp={() => this.setState({ paint: false })}\n        >\n          <tbody>\n            {grid.map((row, rowIndex) => (\n              <tr key={rowIndex}>\n                {row.map((color, cellIndex) => (\n                  <td\n                    key={cellIndex}\n                    onMouseOver={() =>\n                      this.handleMousrover(rowIndex, cellIndex)\n                    }\n                    onMouseUp={() => {\n                      if (grid[rowIndex][cellIndex].state === 'start') {\n                        this.setState({ moveStart: false });\n                      }\n                    }}\n                    onMouseDown={() => {\n                      if (grid[rowIndex][cellIndex].state === 'start') {\n                        this.setState({ moveStart: true });\n                      }\n                    }}\n                    onClick={() => {\n                      this.props.drawWall(rowIndex, cellIndex);\n                    }}\n                    className={grid[rowIndex][cellIndex].color}\n                  ></td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\nconst mapState = (state) => {\n  return {\n    grid: state.grid,\n    start: state.start,\n    end: state.end,\n  };\n};\nconst mapDispatch = (dispatch) => {\n  return {\n    paint: (row, col) => dispatch(colorize(row, col)),\n    paintPath: (row, col) => dispatch(paintPath(row, col)),\n    drawWall: (row, col) => dispatch(drawWall(row, col)),\n    setStart: (row, col) => dispatch(setStart(row, col)),\n  };\n};\nexport default connect(mapState, mapDispatch)(Grid);\n","export const sleep = (milliseconds) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, milliseconds);\n  });\n};\n","import { sleep } from './ult';\n\nexport const bfs = async function (grid, startCoordinates, callback) {\n  var distanceFromTop = startCoordinates[0];\n  var distanceFromLeft = startCoordinates[1];\n\n  // Each \"location\" will store its coordinates\n  // and the shortest path required to arrive there\n  var location = {\n    distanceFromTop: distanceFromTop,\n    distanceFromLeft: distanceFromLeft,\n    path: [],\n    status: 'Start',\n  };\n\n  // Initialize the queue with the start location already inside\n  var queue = [location];\n  const visited = new Set();\n  // Loop through the grid searching for the goal\n  while (queue.length > 0) {\n    // Take the first location off the queue\n    var currentLocation = queue.shift();\n    // callback(currentLocation.distanceFromTop, currentLocation.distanceFromLeft);\n    // await sleep(0);\n    // Explore North\n    var newLocationNorth = await exploreInDirection(\n      currentLocation,\n      'North',\n      grid,\n      callback,\n      visited\n    );\n\n    if (newLocationNorth.status === 'Goal') {\n      return newLocationNorth.path;\n    } else if (newLocationNorth.status === 'Valid') {\n      queue.push(newLocationNorth);\n    }\n\n    // Explore East\n    var newLocationEast = await exploreInDirection(\n      currentLocation,\n      'East',\n      grid,\n      callback,\n      visited\n    );\n    if (newLocationEast.status === 'Goal') {\n      return newLocationEast.path;\n    } else if (newLocationEast.status === 'Valid') {\n      queue.push(newLocationEast);\n    }\n\n    // Explore South\n    var newLocationSouth = await exploreInDirection(\n      currentLocation,\n      'South',\n      grid,\n      callback,\n      visited\n    );\n    if (newLocationSouth.status === 'Goal') {\n      return newLocationSouth.path;\n    } else if (newLocationSouth.status === 'Valid') {\n      queue.push(newLocationSouth);\n    }\n\n    // Explore West\n    var newLocationWest = await exploreInDirection(\n      currentLocation,\n      'West',\n      grid,\n      callback,\n      visited\n    );\n    if (newLocationWest.status === 'Goal') {\n      return newLocationWest.path;\n    } else if (newLocationWest.status === 'Valid') {\n      queue.push(newLocationWest);\n    }\n  }\n\n  // No valid path found\n  return false;\n};\n\n// This function will check a location's status\n// (a location is \"valid\" if it is on the grid, is not an \"obstacle\",\n// and has not yet been visited by our algorithm)\n// Returns \"Valid\", \"Invalid\", \"Blocked\", or \"Goal\"\nvar locationStatus = function (location, grid, set) {\n  var maxRowSize = grid.length;\n  var maxColSize = grid[0].length;\n  var dft = location.distanceFromTop;\n  var dfl = location.distanceFromLeft;\n\n  if (\n    location.distanceFromLeft < 0 ||\n    location.distanceFromLeft >= maxColSize ||\n    location.distanceFromTop < 0 ||\n    location.distanceFromTop >= maxRowSize ||\n    set.has(`${location.distanceFromTop}|${location.distanceFromLeft}`)\n  ) {\n    // location is not on the grid--return false\n    return 'Invalid';\n  } else if (grid[dft][dfl].state === 'Goal') {\n    return 'Goal';\n  } else if (grid[dft][dfl].state !== 'Empty') {\n    // location is either an obstacle or has been visited\n    return 'Blocked';\n  } else {\n    return 'Valid';\n  }\n};\n\n// Explores the grid from the given location in the given\n// direction\nvar exploreInDirection = async function (\n  currentLocation,\n  direction,\n  grid,\n  callback,\n  set\n) {\n  var newPath = currentLocation.path.slice();\n  newPath.push(direction);\n\n  var dft = currentLocation.distanceFromTop;\n  var dfl = currentLocation.distanceFromLeft;\n\n  if (direction === 'North') {\n    dft -= 1;\n  } else if (direction === 'East') {\n    dfl += 1;\n  } else if (direction === 'South') {\n    dft += 1;\n  } else if (direction === 'West') {\n    dfl -= 1;\n  }\n\n  var newLocation = {\n    distanceFromTop: dft,\n    distanceFromLeft: dfl,\n    path: newPath,\n    status: 'Unknown',\n  };\n  newLocation.status = locationStatus(newLocation, grid, set);\n  // callback(newLocation.distanceFromTop, newLocation.distanceFromLeft);\n  // await sleep(0);\n  // If this new location is valid, mark it as 'Visited'\n  if (newLocation.status === 'Valid') {\n    // grid[newLocation.distanceFromTop][newLocation.distanceFromLeft] = 'Visited';\n    set.add(`${newLocation.distanceFromTop}|${newLocation.distanceFromLeft}`);\n    callback(newLocation.distanceFromTop, newLocation.distanceFromLeft);\n    await sleep(0);\n  }\n\n  return newLocation;\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { clear, colorize, paintPath } from '../store/store';\nimport { bfs } from './BFS';\nimport { sleep } from './ult';\nimport headerStyle from './header.module.css';\nimport selectStyle from './selectMenu.module.css';\nclass Header extends React.Component {\n  search = async (grid, start) => {\n    let ans = await bfs(grid, start, this.props.paint);\n    //north,south west    east\n    let direction = {\n      North: [-1, 0],\n      South: [1, 0],\n      West: [0, -1],\n      East: [0, 1],\n    };\n\n    let startrow = start[0];\n    let startcol = start[1];\n    for (let i = 0; i < ans.length; ++i) {\n      let dr = direction[ans[i]];\n      startrow += dr[0];\n      startcol += dr[1];\n      this.props.paintPath(startrow, startcol);\n      await sleep(20);\n    }\n    // console.log(this.props.grid);\n  };\n  render() {\n    const { grid, start } = this.props;\n    return (\n      <div className={headerStyle.header}>\n        <h3>PathFinding Visualizer</h3>\n\n        <div className={headerStyle.button} onClick={this.props.clear}>\n          <a href='#'>Clear</a>\n        </div>\n        <div\n          className={headerStyle.button}\n          onClick={() => this.search(grid, start)}\n        >\n          <a href='#'>Start</a>\n        </div>\n      </div>\n    );\n  }\n}\nconst mapState = (state) => {\n  return {\n    grid: state.grid,\n    start: state.start,\n    end: state.end,\n  };\n};\nconst mapDispatch = (dispatch) => {\n  return {\n    clear: () => dispatch(clear()),\n    paint: (row, col) => dispatch(colorize(row, col)),\n    paintPath: (row, col) => dispatch(paintPath(row, col)),\n  };\n};\n\nexport default connect(mapState, mapDispatch)(Header);\n","import React from 'react';\n\nimport './App.css';\nimport Grid from './Grid';\nimport Header from './Header';\nfunction App() {\n  return (\n    <div className='App'>\n      <Header />\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store';\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"element\":\"Grid_element__1gWPd\",\"stretch\":\"Grid_stretch__2x8gV\",\"wall\":\"Grid_wall__1T6dr\",\"stretchwall\":\"Grid_stretchwall__2RXxf\",\"red\":\"Grid_red__3mEZA\"};"],"sourceRoot":""}