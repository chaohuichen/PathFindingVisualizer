{"version":3,"sources":["components/header.module.css","store/store.js","components/Grid.js","components/Header.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","gird","Array","i","length","fill","initialState","grid","store","createStore","state","action","type","newGrid","row","column","sleep","milliseconds","Promise","resolve","reject","setTimeout","Grid","paint","handleMousrover","bind","search","queue","h","l","map","Map","shift","col","has","this","props","set","push","id","style","width","height","onClick","onMouseDown","setState","onMouseUp","rowIndex","key","color","cellIndex","onMouseOver","className","Component","connect","dispatch","colorize","Header","headerStyle","header","clear","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.70d617fd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__2eggW\"};","import { createStore, applyMiddleware } from 'redux';\nimport loggerMiddleware from 'redux-logger';\n\n//action type\nlet gird = new Array(20);\nfor (let i = 0; i < gird.length; ++i) {\n  gird[i] = new Array(30).fill(0);\n}\n// gird[0][0] = 'green';\n// gird[gird.length - 1][gird[0].length - 1] = 'blue';\nconst initialState = { grid: gird };\n// const initialState = { grid: Array(20).fill(Array(80).fill('')) };\nconst COLORIZE = 'COLORIZE';\nconst CLEAR = 'CLEAR';\n//action creator\nexport const colorize = (row, column) => ({ type: COLORIZE, row, column });\nexport const clear = () => ({ type: CLEAR });\n\nexport const BFS = (grid) => {};\n//reducer\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case COLORIZE:\n      const newGrid = [...state.grid];\n      newGrid[action.row] = [...newGrid[action.row]];\n      newGrid[action.row][action.column] = 'red';\n      return { ...state, grid: newGrid };\n    case CLEAR:\n      return initialState;\n    default:\n      return state;\n  }\n}\n\nconst store = createStore(reducer);\n\nexport default store;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { colorize, BFS } from '../store/store';\n\nconst sleep = (milliseconds) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, milliseconds);\n  });\n};\nclass Grid extends Component {\n  constructor() {\n    super();\n    this.state = {\n      paint: false,\n    };\n\n    this.handleMousrover = this.handleMousrover.bind(this);\n\n    this.search = this.search.bind(this);\n  }\n  async search(grid) {\n    let queue = [[0, 0]];\n    // for (let i = 0; i < grid.length; ++i) {\n    //   for (let j = 0; j < grid[i].length; ++j) {\n    //     if (this.checkNeibor(grid, i, j)) {\n    //       queue.push([i, j]);\n    //     }\n    //   }\n    // }\n\n    let h = grid.length,\n      l = grid[0].length;\n\n    let map = new Map();\n    while (queue.length > 0) {\n      const [row, col] = queue.shift();\n      // this.props.paint(row, col);\n      // await sleep(100);\n\n      if (\n        row < 0 ||\n        col < 0 ||\n        row >= grid.length ||\n        col >= grid[0].length ||\n        grid[row][col] !== 0 ||\n        map.has(`${row}+#${col}`)\n      ) {\n        continue;\n      }\n      this.props.paint(row, col);\n      map.set(`${row}+#${col}`, 1);\n      await sleep(0);\n      if (row === h - 1 && col === l - 1) {\n        break;\n      }\n      // for (let i = 0; i < 4; ++i) {\n      //   let rr = row + dr[i];\n      //   let cc = col + dc[i];\n      //   if (rr < 0 || cc < 0 || rr >= h || cc >= l) continue;\n      //   queue.push([rr, cc]);\n      // }\n      queue.push([row, col - 1]);\n      queue.push([row, col + 1]);\n      queue.push([row + 1, col]);\n      queue.push([row - 1, col]);\n    }\n  }\n  checkNeibor(grid, row, col) {\n    return true;\n  }\n\n  handleMousrover(row, col) {\n    if (this.state.paint) {\n      this.props.paint(row, col);\n    }\n  }\n  render() {\n    const { grid } = this.props;\n    return (\n      <div id='pixelate'>\n        {/* truncated for brevity... */}\n        <button\n          style={{ width: 50, height: 50 }}\n          onClick={() => this.search(this.props.grid)}\n        >\n          Start\n        </button>\n        <table\n          onMouseDown={() => this.setState({ paint: true })}\n          onMouseUp={() => this.setState({ paint: false })}\n        >\n          <tbody>\n            {grid.map((row, rowIndex) => (\n              <tr key={rowIndex}>\n                {row.map((color, cellIndex) => (\n                  <td\n                    key={cellIndex}\n                    onMouseOver={() =>\n                      this.handleMousrover(rowIndex, cellIndex)\n                    }\n                    onClick={() => {\n                      this.props.paint(rowIndex, cellIndex);\n                    }}\n                    className={grid[rowIndex][cellIndex]}\n                  ></td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\nconst mapState = (state) => {\n  return {\n    grid: state.grid,\n  };\n};\nconst mapDispatch = (dispatch) => {\n  return {\n    paint: (row, col) => dispatch(colorize(row, col)),\n  };\n};\nexport default connect(mapState, mapDispatch)(Grid);\n","import React, { Suspense } from 'react';\nimport { connect } from 'react-redux';\nimport { clear } from '../store/store';\nimport headerStyle from './header.module.css';\nclass Header extends React.Component {\n  constructor() {\n    super();\n  }\n  render() {\n    return (\n      <div className={headerStyle.header}>\n        <h3>PathFinding Visualizer</h3>\n        <button onClick={this.props.clear}>Clear</button>\n      </div>\n    );\n  }\n}\n\nconst mapDispatch = (dispatch) => {\n  return {\n    clear: () => dispatch(clear()),\n  };\n};\n\nexport default connect(null, mapDispatch)(Header);\n","import React from 'react';\n\nimport './App.css';\nimport Grid from './Grid';\nimport Header from './Header';\nfunction App() {\n  return (\n    <div className='App'>\n      <Header />\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store';\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}